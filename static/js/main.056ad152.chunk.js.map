{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","wordsets","toggleexpanded","setPreferenceAndState","expanded","state","toggleCard","cardMode","speak","window","card","words","index","kanji","kunyomi","console","log","speech","SpeechSynthesisUtterance","lang","speechSynthesis","switchWordSet","wordsetIndex","length","setState","dict","filter","x","tags","indexOf","dispIndex","nextKanji","setPreference","ls","set","objectSpread","get","handleColorChange","color","event","foreground","Math","round","parseInt","rgb","r","g","b","background","hex","prevKanji","keyHandle","keyCode","shuffle","floor","random","handleIndexInput","target","value","replace","preferences","lsPref","isPopoverOpen","document","addEventListener","removeEventListener","_this2","react_default","a","createElement","className","style","onKeyDown","handleKeyPress","concat","data-tip","onyomi","keyword","elements","join","dangerouslySetInnerHTML","__html","heisig","commen","onClick","Icon_default","path","mdiBookOutline","size","mdiShuffle","mdiEyeOutline","mdiEyeOffOutline","mdiMicrophoneOutline","Popover_default","isOpen","onClickOutside","position","content","es","onChange","mdiEyedropperVariant","contentEditable","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"uRAqSeA,cAhRb,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAFRQ,SAAW,CAAC,KAAM,UAAW,SAAS,YACnBP,EAuBnBQ,eAAiB,WACfR,EAAKS,sBAAsB,CAAEC,UAAWV,EAAKW,MAAMD,YAxBlCV,EA2BnBY,WAAa,WACXZ,EAAKS,sBAAsB,CAAEI,UAAWb,EAAKW,MAAME,YA5BlCb,EA+BnBc,MAAQ,WACN,GAAG,oBAAqBC,OAAO,CAC7B,IAAIC,EAAOhB,EAAKW,MAAMM,MAAMjB,EAAKW,MAAMO,OACnCC,EAAQH,EAAKI,QAAUJ,EAAKI,QAAUJ,EAAKG,MAC/CE,QAAQC,IAAIH,GACZ,IAAII,EAAS,IAAIC,yBAAyBL,GAC1CI,EAAOE,KAAO,QACdV,OAAOW,gBAAgBZ,MAAMS,KAtCdvB,EA0CnB2B,cAAgB,WACd,IAAIC,GAAgB5B,EAAKW,MAAMiB,aAAe,GAAK5B,EAAKO,SAASsB,OACjE7B,EAAK8B,SAAS,CAACb,MAAOc,EAAKC,OAAO,SAAAC,GAAC,OAAoD,GAAhDA,EAAEC,KAAKC,QAAQnC,EAAKO,SAASqB,QACpE5B,EAAKS,sBAAsB,CACzBmB,eACAV,MAAO,EACPkB,UAAW,KAhDIpC,EAoDnBqC,UAAY,WACV,IAAInB,EACFlB,EAAKW,MAAMO,MAAQlB,EAAKW,MAAMM,MAAMY,OAAS,EACzC7B,EAAKW,MAAMO,MAAQ,EACnBlB,EAAKW,MAAMM,MAAMY,OAAS,EAChC7B,EAAKS,sBAAsB,CACzBS,QACAkB,UAAWlB,EAAQ,KA3DJlB,EA+DnBsC,cAAgB,SAAC3B,GACf4B,IAAGC,IAAI,OAAPvC,OAAAwC,EAAA,EAAAxC,CAAA,GAAkBsC,IAAGG,IAAI,QAAW/B,KAhEnBX,EAmEnBS,sBAAwB,SAACE,GACvBX,EAAKsC,cAAc3B,GACnBX,EAAK8B,SAASnB,IArEGX,EAwEnB2C,kBAAoB,SAACC,EAAOC,GAC1B,IAMIC,EANIC,KAAKC,OACc,IAAxBC,SAASL,EAAMM,IAAIC,GACM,IAAxBF,SAASL,EAAMM,IAAIE,GACK,IAAxBH,SAASL,EAAMM,IAAIG,IACnB,KAEiB,IAAM,QAAU,QACjC1C,EAAQ,CAAE2C,WAAYV,EAAMW,IAAKT,cACrC9C,EAAKS,sBAAsBE,IAjFVX,EAoFnBwD,UAAY,WACV,IAAItC,EAAQlB,EAAKW,MAAMO,MAAQ,EAAIlB,EAAKW,MAAMO,MAAQ,EAAI,EAC1DlB,EAAKS,sBAAsB,CAAES,QAAOkB,UAAWlB,EAAQ,KAtFtClB,EA2FnByD,UAAY,SAAAZ,GAEV,GADAxB,QAAQC,IAAIuB,EAAMa,SACG,IAAjBb,EAAMa,QAAe,CACvB,IAAItB,EAAYa,SAASjD,EAAKW,MAAMyB,WAChCA,EAAY,GAAKA,GAAapC,EAAKW,MAAMM,MAAMY,QACjD7B,EAAKS,sBAAsB,CAAES,MAAOkB,EAAY,IAI/B,IAAjBS,EAAMa,SACR1D,EAAKqC,YAEc,IAAjBQ,EAAMa,SACR1D,EAAKwD,YAEc,IAAjBX,EAAMa,SACR1D,EAAKQ,iBAEc,IAAjBqC,EAAMa,SACR1D,EAAK2D,UAEc,IAAjBd,EAAMa,SACR1D,EAAKc,SAjHUd,EA4HnB2D,QAAU,WACR3D,EAAKS,sBAAsB,CACzBS,MAAO6B,KAAKa,MAAMb,KAAKc,SAAW7D,EAAKW,MAAMM,MAAMY,WA9HpC7B,EAkInB8D,iBAAmB,SAAAjB,GACjB7C,EAAKS,sBAAsB,CACzB2B,UAAWa,SAASJ,EAAMkB,OAAOC,MAAMC,QAAQ,MAAO,QAlIxD,IAAIC,EAAc,CAChBrD,UAAS,EACTH,UAAU,EACVQ,MAAO,EACPkB,UAAW,EACXkB,WAAY,mBACZ1B,aAAc,GAEZuC,EAAS5B,IAAGG,IAAI,QAVH,OAWbyB,EAGFD,EAAcC,EAFd5B,IAAGC,IAAI,OAAO0B,GAIhBlE,EAAKW,MAALV,OAAAwC,EAAA,EAAAxC,CAAA,GACKiE,EADL,CAEEE,eAAe,EACfnD,MAAOc,EAAKC,OAAO,SAAAC,GAAC,OAAgE,GAA5DA,EAAEC,KAAKC,QAAQnC,EAAKO,SAAS2D,EAAYtC,mBAnBlD5B,mFAsHjBqE,SAASC,iBAAiB,UAAWnE,KAAKsD,WAAW,kDAGrDY,SAASE,oBAAoB,UAAWpE,KAAKsD,WAAW,oCAgBjD,IAAAe,EAAArE,KACDiE,EAAkBjE,KAAKQ,MAAvByD,cACFpD,EAAOb,KAAKQ,MAAMM,MAAMd,KAAKQ,MAAMO,OACnCC,EAAQH,EAAKG,MAAQH,EAAKG,MAAQH,EAAKI,QAC3C,OACEqD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVC,MAAO,CAAEvB,WAAYnD,KAAKQ,MAAM2C,YAChCwB,UAAW3E,KAAK4E,iBAGlBN,EAAAC,EAAAC,cAAA,OAAKC,UAAS,UACRC,MAAO,CAACjC,MAAMzC,KAAKQ,MAAME,SAAS,OAAOV,KAAKQ,MAAMmC,YACpDgC,UAAW3E,KAAK4E,gBACpBN,EAAAC,EAAAC,cAAA,OAAKC,UAAS,QAAAI,OAAUjC,KAAKa,MAAMzC,EAAMU,OAAS,KAAOV,GACxDhB,KAAKQ,MAAMD,UACV+D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKM,WAAS,SAASL,UAAU,UAC9B5D,EAAKkE,QAERT,EAAAC,EAAAC,cAAA,OAAKM,WAAS,UAAUL,UAAU,WAC/B5D,EAAKI,SAERqD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKM,WAAS,UAAUL,UAAU,WAC/B5D,EAAKmE,SAEPnE,EAAKoE,UAAYpE,EAAKoE,SAASvD,OAAS,GACvC4C,EAAAC,EAAAC,cAAA,OAAKM,WAAS,mBAAmBL,UAAU,cACxC5D,EAAKoE,SAASC,KAAK,OAGxBZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OACEM,WAAS,kBACTK,wBAAyB,CAAEC,OAAQvE,EAAKwE,QACxCZ,UAAU,WAEZH,EAAAC,EAAAC,cAAA,WACC3D,EAAKyE,QACJhB,EAAAC,EAAAC,cAAA,OACEM,WAAS,mBACTK,wBAAyB,CAAEC,OAAQvE,EAAKyE,QACxCb,UAAU,YAOpBH,EAAAC,EAAAC,cAAA,OACEC,UAAU,cACVc,QAASvF,KAAKkC,YAEhBoC,EAAAC,EAAAC,cAAA,OACEC,UAAU,cACVc,QAASvF,KAAKqD,YAEhBiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CACE9B,MAAOzC,KAAKQ,MAAMmC,WAClB8B,UAAU,cACVc,QAASvF,KAAKwB,cACdsD,WAAU,iBACVW,KAAMC,IACNC,KAAM,IAERrB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CACE9B,MAAOzC,KAAKQ,MAAMmC,WAClB8B,UAAU,cACVc,QAASvF,KAAKwD,QACdsB,WAAS,cACTW,KAAMG,IACND,KAAM,IAERrB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CACE9B,MAAOzC,KAAKQ,MAAMmC,WAClB8B,UAAU,cACVc,QAASvF,KAAKK,eACdyE,WAAS,kBACTW,KAAMzF,KAAKQ,MAAMD,SAAWsF,IAAgBC,IAC5CH,KAAM,IAGRrB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CACE9B,MAAOzC,KAAKQ,MAAMmC,WAClB8B,UAAU,cACVc,QAASvF,KAAKW,MACdmE,WAAS,YACTW,KAAMM,IACNJ,KAAM,IAERrB,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CACE0B,OAAQhC,EACRiC,eAAgB,kBAAM7B,EAAK1C,SAAS,CAAEsC,eAAe,KACrDkC,SAAU,MACVC,QACE9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CACE5D,MAAOzC,KAAKQ,MAAM2C,WAClBmD,SAAUtG,KAAKwC,sBAKrB8B,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CACE9B,MAAOzC,KAAKQ,MAAMmC,WAClB8B,UAAU,cACVc,QAAS,kBAAMlB,EAAK1C,SAAS,CAAEsC,eAAgBA,KAE/CwB,KAAMc,IACNZ,KAAM,MAIZrB,EAAAC,EAAAC,cAAA,OACEE,MAAO,CAAEjC,MAAOzC,KAAKQ,MAAMmC,YAC3B8B,UAAU,wBAFZ,IAII,IACFH,EAAAC,EAAAC,cAAA,SACEE,MAAO,CAAEjC,MAAOzC,KAAKQ,MAAMmC,YAC3B8B,UAAU,aACV6B,SAAUtG,KAAK2D,iBACfE,MAAO7D,KAAKQ,MAAMyB,UAAY,GAC9BuE,iBAAiB,IAVrB,IAYIxG,KAAKQ,MAAMM,MAAMY,OAZrB,IAY8B1B,KAAKI,SAASJ,KAAKQ,MAAMiB,uBA3Q7CgF,IAAMC,WCPJC,QACW,cAA7B/F,OAAOgG,SAASC,UAEe,UAA7BjG,OAAOgG,SAASC,UAEhBjG,OAAOgG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAAS/C,SAASgD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,ilpwkBEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.056ad152.chunk.js","sourcesContent":["import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Icon from \"@mdi/react\";\nimport {\n  mdiEyeOutline,\n  mdiEyeOffOutline,\n  mdiEyedropperVariant,\n  mdiShuffle,\n  mdiBookOutline,\n  mdiMicrophoneOutline,\n  mdiCardBulletedOffOutline,\n  mdiCardTextOutline\n} from \"@mdi/js\";\nimport dict from \"./rtk\";\nimport Popover from \"react-tiny-popover\";\nimport { TwitterPicker } from \"react-color\";\nimport ls from 'local-storage'\n\nclass App extends React.Component {\n  wordsets = [\"N4\", \"N4Words\", \"heisig\",\"katakana\"];\n  constructor(props) {\n    super(props);\n    let preferences = {\n      cardMode:true,\n      expanded: true,\n      index: 0,\n      dispIndex: 1,\n      background: \"rgb(255, 182, 0)\",\n      wordsetIndex: 0,\n    }\n    let lsPref = ls.get('pref')\n    if(!lsPref){\n      ls.set('pref',preferences)\n    }else{\n      preferences = lsPref\n    }\n    this.state = {\n      ...preferences,\n      isPopoverOpen: false, \n      words: dict.filter(x => x.tags.indexOf(this.wordsets[preferences.wordsetIndex]) != -1)\n    };\n  }\n\n  toggleexpanded = () => {\n    this.setPreferenceAndState({ expanded: !this.state.expanded });\n  };\n\n  toggleCard = () => {\n    this.setPreferenceAndState({ cardMode: !this.state.cardMode });\n  }\n\n  speak = () => {\n    if('speechSynthesis' in window){\n      var card = this.state.words[this.state.index];\n      let kanji = card.kunyomi ? card.kunyomi : card.kanji;\n      console.log(kanji)\n      var speech = new SpeechSynthesisUtterance(kanji);\n      speech.lang = 'ja-JP';\n      window.speechSynthesis.speak(speech);\n    }\n  }\n\n  switchWordSet = () => {\n    let wordsetIndex = (this.state.wordsetIndex + 1) % this.wordsets.length;\n    this.setState({words: dict.filter(x => x.tags.indexOf(this.wordsets[wordsetIndex]) != -1)})\n    this.setPreferenceAndState({\n      wordsetIndex,\n      index: 0,\n      dispIndex: 1,\n    });\n  };\n\n  nextKanji = () => {\n    let index =\n      this.state.index < this.state.words.length - 1\n        ? this.state.index + 1\n        : this.state.words.length - 1;\n    this.setPreferenceAndState({\n      index,\n      dispIndex: index + 1\n    });\n  };\n\n  setPreference = (state) => {\n    ls.set('pref',{...ls.get('pref'),...state})\n  }\n\n  setPreferenceAndState = (state) => {\n    this.setPreference(state);\n    this.setState(state);\n  }\n\n  handleColorChange = (color, event) => {\n    var o = Math.round(\n      (parseInt(color.rgb.r) * 299 +\n        parseInt(color.rgb.g) * 587 +\n        parseInt(color.rgb.b) * 114) /\n        1000\n    );\n    var foreground = o > 125 ? \"black\" : \"white\";\n    let state = { background: color.hex, foreground }\n    this.setPreferenceAndState(state);\n  };\n\n  prevKanji = () => {\n    let index = this.state.index > 0 ? this.state.index - 1 : 0;\n    this.setPreferenceAndState({ index, dispIndex: index + 1 });\n    // this.setPreference('index',index);\n    // this.setPreference('dispIndex',index + 1 );\n  };\n\n  keyHandle = event => {\n    console.log(event.keyCode);\n    if (event.keyCode == 13) {\n      let dispIndex = parseInt(this.state.dispIndex);\n      if (dispIndex > 0 && dispIndex <= this.state.words.length){\n        this.setPreferenceAndState({ index: dispIndex - 1 });\n      }\n       \n    }\n    if (event.keyCode == 68) {\n      this.nextKanji();\n    }\n    if (event.keyCode == 65) {\n      this.prevKanji();\n    }\n    if (event.keyCode == 69) {\n      this.toggleexpanded();\n    }\n    if (event.keyCode == 83) {\n      this.shuffle();\n    }\n    if (event.keyCode == 90) {\n      this.speak();\n    }\n  };\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.keyHandle, false);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.keyHandle, false);\n  }\n\n  shuffle = () => {\n    this.setPreferenceAndState({\n      index: Math.floor(Math.random() * this.state.words.length)\n    });\n  };\n\n  handleIndexInput = event => {\n    this.setPreferenceAndState({\n      dispIndex: parseInt(event.target.value.replace(/\\D/g, \"\"))\n    });\n  };\n  \n\n  render() {\n    var { isPopoverOpen } = this.state;\n    var card = this.state.words[this.state.index];\n    let kanji = card.kanji ? card.kanji : card.kunyomi;\n    return (\n      <div className=\"App\">\n        <div\n          className=\"background\"\n          style={{ background: this.state.background }}\n          onKeyDown={this.handleKeyPress}\n        />\n        \n        <div className={`content`} \n              style={{color:this.state.cardMode?\"#111\":this.state.foreground}}\n              onKeyDown={this.handleKeyPress}>\n          <div className={`kanji${Math.floor(kanji.length / 6)}`}>{kanji}</div>\n          {this.state.expanded && (\n            <div>\n              <div data-tip=\"onyomi\" className=\"onyomi\">\n                {card.onyomi}\n              </div>\n              <div data-tip=\"kunyomi\" className=\"kunyomi\">\n                {card.kunyomi}\n              </div>\n              <br />\n              <div data-tip=\"meaning\" className=\"keyword\">\n                {card.keyword}\n              </div>\n              {card.elements && card.elements.length > 1 && (\n                <div data-tip=\"component kanjis\" className=\"components\">\n                  {card.elements.join(\", \")}\n                </div>\n              )}\n              <br />\n              <div\n                data-tip=\"heisig mnemonic\"\n                dangerouslySetInnerHTML={{ __html: card.heisig }}\n                className=\"heisig\"\n              />\n              <br />\n              {card.commen && (\n                <div\n                  data-tip=\"heisig's comment\"\n                  dangerouslySetInnerHTML={{ __html: card.commen }}\n                  className=\"notes\"\n                />\n              )}\n            </div>\n          )}\n        </div>\n\n        <div\n          className=\"next-button\"\n          onClick={this.nextKanji}\n        />\n        <div\n          className=\"prev-button\"\n          onClick={this.prevKanji}\n        />\n        <div className=\"toolbar hovercharm\">\n          <Icon\n            color={this.state.foreground}\n            className=\"tool-button\"\n            onClick={this.switchWordSet}\n            data-tip={\"switch wordset\"}\n            path={mdiBookOutline}\n            size={1}\n          />\n          <Icon\n            color={this.state.foreground}\n            className=\"tool-button\"\n            onClick={this.shuffle}\n            data-tip=\"Shuffle (S)\"\n            path={mdiShuffle}\n            size={1}\n          />\n          <Icon\n            color={this.state.foreground}\n            className=\"tool-button\"\n            onClick={this.toggleexpanded}\n            data-tip=\"Expand card (E)\"\n            path={this.state.expanded ? mdiEyeOutline : mdiEyeOffOutline}\n            size={1}\n          />\n         \n          <Icon\n            color={this.state.foreground}\n            className=\"tool-button\"\n            onClick={this.speak}\n            data-tip=\"Speak (Z)\"\n            path={mdiMicrophoneOutline}\n            size={1}\n          />\n          <Popover\n            isOpen={isPopoverOpen}\n            onClickOutside={() => this.setState({ isPopoverOpen: false })}\n            position={\"top\"} // preferred position\n            content={\n              <div>\n                <TwitterPicker\n                  color={this.state.background}\n                  onChange={this.handleColorChange}\n                />\n              </div>\n            }\n          >\n            <Icon\n              color={this.state.foreground}\n              className=\"tool-button\"\n              onClick={() => this.setState({ isPopoverOpen: !isPopoverOpen })}\n            \n              path={mdiEyedropperVariant}\n              size={1}\n            />\n          </Popover>\n        </div>\n        <div\n          style={{ color: this.state.foreground }}\n          className=\"headerbar hovercharm\"\n        >\n          #{\" \"}\n          <input\n            style={{ color: this.state.foreground }}\n            className=\"indexinput\"\n            onChange={this.handleIndexInput}\n            value={this.state.dispIndex + \"\"}\n            contentEditable={true}\n          />\n          /{this.state.words.length} {this.wordsets[this.state.wordsetIndex]}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}